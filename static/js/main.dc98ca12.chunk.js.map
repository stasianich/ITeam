{"version":3,"sources":["components/ModalWindow/ModalWindow.jsx","components/ScoreBoard/ScoreBoard.jsx","components/TicTacToe/TicTacToe.jsx","App.jsx","index.jsx"],"names":["ModalWindow","React","memo","addNames","useState","firstPlayerName","setFirstPlayerName","secondPlayerName","setSecondPlayerName","updateName","event","target","name","value","className","onSubmit","preventDefault","type","placeholder","onChange","ScoreBoard","firstPlayerWinsCounter","secondPlayerWinsCounter","propTypes","PropTypes","string","isRequired","number","TicTacToe","updateScore","id","board","updateBoard","count","setCount","winningCombination","setWinningCombination","checkDraw","every","cell","alert","clearBoard","useEffect","currentPlayer","winnerFound","forEach","line","i","setTimeout","isWinner","clearInterval","map","onClick","position","clickCell","key","classNames","firstCombination","secondCombination","thirdCombination","fourthCombination","fifthCombination","sixthCombination","seventhCombination","eighthCombination","App","setFirstPlayerWinsCounter","setSecondPlayerWinsCounter","firstName","secondName","player","playerName","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc98ca12.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './ModalWindow.scss';\n\nexport const ModalWindow = React.memo(({ addNames }) => {\n  const [firstPlayerName, setFirstPlayerName] = useState('');\n  const [secondPlayerName, setSecondPlayerName] = useState('');\n\n  const updateName = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'firstPlayerName') {\n      setFirstPlayerName(value);\n    } else if (name === 'secondPlayerName') {\n      setSecondPlayerName(value);\n    }\n  };\n\n  return (\n    <div className=\"modalContainer\">\n      <div className=\"modalWindow window\">\n        <form\n          className=\"enter-nicknames-form\"\n          onSubmit={(event) => {\n            event.preventDefault();\n            addNames(firstPlayerName, secondPlayerName);\n          }}\n        >\n          <div className=\"enter-nicknames-form__title\">\n            Please, enter nicknames\n          </div>\n          <input\n            type=\"text\"\n            name=\"firstPlayerName\"\n            className=\"enter-nicknames-form__first-player-name\"\n            placeholder=\"Enter first player name\"\n            value={firstPlayerName}\n            onChange={updateName}\n          />\n          <input\n            type=\"text\"\n            name=\"secondPlayerName\"\n            className=\"enter-nicknames-form__second-player-name\"\n            placeholder=\"Enter second player name\"\n            value={secondPlayerName}\n            onChange={updateName}\n          />\n          <button\n            type=\"submit\"\n            className=\"enter-nicknames-form__submit-button\"\n          >\n            Add names\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n});\n\nModalWindow.propTypes = {\n  addNames: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './ScoreBoard.scss';\nimport PropTypes from 'prop-types';\n\nexport const ScoreBoard = React.memo(({\n  firstPlayerName,\n  secondPlayerName,\n  firstPlayerWinsCounter,\n  secondPlayerWinsCounter,\n}) => (\n  <div className=\"score\">\n    <div className=\"score__title\">\n      Score:\n    </div>\n    <div className=\"score__first-player\">\n      {`${firstPlayerName}: ${firstPlayerWinsCounter}`}\n    </div>\n    <div className=\"score__second-player\">\n      {`${secondPlayerName}: ${secondPlayerWinsCounter}`}\n    </div>\n  </div>\n));\n\nScoreBoard.propTypes = {\n  firstPlayerName: PropTypes.string.isRequired,\n  firstPlayerWinsCounter: PropTypes.number.isRequired,\n  secondPlayerName: PropTypes.string.isRequired,\n  secondPlayerWinsCounter: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './TicTacToe.scss';\nimport classNames from 'classnames';\n\nexport const TicTacToe = ({ updateScore }) => {\n  const [board, updateBoard] = useState([\n    {\n      id: 0,\n      value: null,\n    },\n    {\n      id: 1,\n      value: null,\n    },\n    {\n      id: 2,\n      value: null,\n    },\n    {\n      id: 3,\n      value: null,\n    },\n    {\n      id: 4,\n      value: null,\n    },\n    {\n      id: 5,\n      value: null,\n    },\n    {\n      id: 6,\n      value: null,\n    },\n    {\n      id: 7,\n      value: null,\n    },\n    {\n      id: 8,\n      value: null,\n    },\n  ]);\n  const [count, setCount] = useState(0);\n  const [winningCombination, setWinningCombination] = useState(null);\n\n  const clickCell = (event) => {\n    const { name: position } = event.target;\n\n    updateBoard(board.map((cell) => {\n      if (cell.id === +position && cell.value === null) {\n        return {\n          id: +position, value: (count % 2 === 0 ? 'X' : 'O'),\n        };\n      }\n\n      return cell;\n    }));\n\n    setCount(value => value + 1);\n  };\n\n  const isWinner = () => {\n    const combinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    const currentPlayer = (count % 2 === 0 ? 'O' : 'X');\n\n    let winnerFound = false;\n\n    combinations.forEach((line, i) => {\n      if (board[line[0]].value === currentPlayer\n        && board[line[1]].value === currentPlayer\n        && board[line[2]].value === currentPlayer) {\n        setWinningCombination(i + 1);\n        winnerFound = true;\n\n        setTimeout(() => {\n          updateScore(currentPlayer);\n          clearBoard();\n        }, 200);\n      }\n    });\n\n    if (!winnerFound) {\n      checkDraw();\n    }\n  };\n\n  const checkDraw = () => {\n    if (board.every(cell => cell.value !== null)) {\n      alert('Draw');\n      clearBoard();\n    }\n  };\n\n  const clearBoard = () => {\n    updateBoard([\n      {\n        id: 0,\n        value: null,\n      },\n      {\n        id: 1,\n        value: null,\n      },\n      {\n        id: 2,\n        value: null,\n      },\n      {\n        id: 3,\n        value: null,\n      },\n      {\n        id: 4,\n        value: null,\n      },\n      {\n        id: 5,\n        value: null,\n      },\n      {\n        id: 6,\n        value: null,\n      },\n      {\n        id: 7,\n        value: null,\n      },\n      {\n        id: 8,\n        value: null,\n      },\n    ]);\n    setCount(0);\n    setWinningCombination(null);\n  };\n\n  useEffect(() => {\n    isWinner();\n    clearInterval();\n  }, [board]);\n\n  return (\n    <div className=\"tic-tac-toe\">\n      {board.map((cell, i) => {\n        return (\n          <button\n            type=\"button\"\n            name={i}\n            onClick={event => clickCell(event)}\n            className=\"tic-tac-toe__cell\"\n            key={cell.id}\n          >\n            {cell.value}\n          </button>\n        );\n      })}\n      {\n        winningCombination\n        && (\n        <div className={\n          classNames(\n            'winning-line',\n            {\n              firstCombination: winningCombination === 1,\n              secondCombination: winningCombination === 2,\n              thirdCombination: winningCombination === 3,\n              fourthCombination: winningCombination === 4,\n              fifthCombination: winningCombination === 5,\n              sixthCombination: winningCombination === 6,\n              seventhCombination: winningCombination === 7,\n              eighthCombination: winningCombination === 8,\n            },\n          )\n        }\n        />\n        )\n      }\n    </div>\n  );\n};\n\nTicTacToe.propTypes = {\n  updateScore: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { ModalWindow } from './components/ModalWindow';\nimport { ScoreBoard } from './components/ScoreBoard/ScoreBoard';\nimport { TicTacToe } from './components/TicTacToe';\n\nconst App = () => {\n  const [firstPlayerName, setFirstPlayerName] = useState('');\n  const [secondPlayerName, setSecondPlayerName] = useState('');\n  const [firstPlayerWinsCounter, setFirstPlayerWinsCounter] = useState(0);\n  const [secondPlayerWinsCounter, setSecondPlayerWinsCounter] = useState(0);\n\n  const addNames = (firstName, secondName) => {\n    setFirstPlayerName(firstName);\n    setSecondPlayerName(secondName);\n  };\n\n  const updateScore = (player) => {\n    const playerName = (player === 'X')\n      ? firstPlayerName\n      : secondPlayerName;\n\n    if (player === 'X') {\n      setFirstPlayerWinsCounter(count => count + 1);\n    } else {\n      setSecondPlayerWinsCounter(count => count + 1);\n    }\n\n    alert(`${playerName} won!`);\n  };\n\n  return (\n    <div className=\"section\">\n      {\n        (!firstPlayerName || !secondPlayerName)\n        && <ModalWindow addNames={addNames} />\n      }\n\n      <TicTacToe\n        updateScore={updateScore}\n      />\n\n      <ScoreBoard\n        firstPlayerName={firstPlayerName}\n        secondPlayerName={secondPlayerName}\n        firstPlayerWinsCounter={firstPlayerWinsCounter}\n        secondPlayerWinsCounter={secondPlayerWinsCounter}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}