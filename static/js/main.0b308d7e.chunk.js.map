{"version":3,"sources":["components/ModalWindow/ModalWindow.jsx","components/ScoreBoard/ScoreBoard.jsx","components/TicTacToe/TicTacToe.jsx","App.jsx","index.jsx"],"names":["ModalWindow","addNames","useState","firstPlayerName","setFirstPlayerName","secondPlayerName","setSecondPlayerName","updateName","event","target","name","value","className","onSubmit","preventDefault","type","placeholder","onChange","onClick","ScoreBoard","firstPlayerWins","secondPlayerWins","TicTacToe","updateScore","Array","fill","field","updateField","count","setCount","winningCombination","setWinningCombination","clickCell","position","updatedField","checkDraw","includes","alert","clearBoard","useEffect","currentPlayer","winnerFound","forEach","line","i","setTimeout","isWinner","map","cell","key","uuidv4","classNames","firstCombination","secondCombination","thirdCombination","fourthCombination","fifthCombination","sixthCombination","seventhCombination","eighthCombination","App","state","setState","player","playerCount","this","React","PureComponent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b308d7e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './ModalWindow.scss';\n\nexport const ModalWindow = ({ addNames }) => {\n  const [firstPlayerName, setFirstPlayerName] = useState('');\n  const [secondPlayerName, setSecondPlayerName] = useState('');\n\n  const updateName = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'firstPlayerName') {\n      setFirstPlayerName(value);\n    } else if (name === 'secondPlayerName') {\n      setSecondPlayerName(value);\n    }\n  };\n\n  return (\n    <div className=\"modalContainer\">\n      <div className=\"modalWindow window\">\n        <form\n          className=\"enter-nicknames-form\"\n          onSubmit={(event) => {\n            event.preventDefault();\n          }}\n        >\n          <div className=\"enter-nicknames-form__title\">\n            Please, enter nicknames\n          </div>\n          <input\n            type=\"text\"\n            name=\"firstPlayerName\"\n            className=\"enter-nicknames-form__first-player-name\"\n            placeholder=\"Enter first player name\"\n            value={firstPlayerName}\n            onChange={updateName}\n          />\n          <input\n            type=\"text\"\n            name=\"secondPlayerName\"\n            className=\"enter-nicknames-form__second-player-name\"\n            placeholder=\"Enter second player name\"\n            value={secondPlayerName}\n            onChange={updateName}\n          />\n          <button\n            type=\"submit\"\n            className=\"enter-nicknames-form__submit-button\"\n            onClick={() => addNames(firstPlayerName, secondPlayerName)}\n          >\n            Add names\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nModalWindow.propTypes = {\n  addNames: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './ScoreBoard.scss';\nimport PropTypes from 'prop-types';\n\nexport const ScoreBoard = ({\n  firstPlayerName,\n  secondPlayerName,\n  firstPlayerWins,\n  secondPlayerWins,\n}) => (\n  <div className=\"score\">\n    <div className=\"score__title\">\n      Score:\n    </div>\n    <div className=\"score__first-player\">\n      {`${firstPlayerName}: ${firstPlayerWins}`}\n    </div>\n    <div className=\"score__second-player\">\n      {`${secondPlayerName}: ${secondPlayerWins}`}\n    </div>\n  </div>\n);\n\nScoreBoard.propTypes = {\n  firstPlayerName: PropTypes.string.isRequired,\n  firstPlayerWins: PropTypes.number.isRequired,\n  secondPlayerName: PropTypes.string.isRequired,\n  secondPlayerWins: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './TicTacToe.scss';\nimport { v4 as uuidv4 } from 'uuid';\nimport classNames from 'classnames';\n\nexport const TicTacToe = ({ updateScore }) => {\n  const [field, updateField] = useState(Array(9).fill(null));\n  const [count, setCount] = useState(0);\n  const [winningCombination, setWinningCombination] = useState(null);\n\n  const clickCell = (event) => {\n    const { name: position } = event.target;\n\n    const updatedField = [...field];\n\n    if (updatedField[position] === null) {\n      updatedField[position] = (count % 2 === 0 ? 'X' : 'O');\n\n      setCount(count + 1);\n      updateField(updatedField);\n    }\n  };\n\n  const isWinner = () => {\n    const combinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    const currentPlayer = (count % 2 === 0 ? 'O' : 'X');\n\n    let winnerFound = false;\n\n    combinations.forEach((line, i) => {\n      if (field[line[0]] === currentPlayer\n        && field[line[1]] === currentPlayer\n        && field[line[2]] === currentPlayer) {\n        setWinningCombination(i + 1);\n        winnerFound = true;\n\n        setTimeout(() => {\n          updateScore(currentPlayer);\n          clearBoard();\n        }, 200);\n      }\n    });\n\n    if (!winnerFound) {\n      checkDraw();\n    }\n  };\n\n  const checkDraw = () => {\n    if (!field.includes(null)) {\n      alert('Draw');\n      clearBoard();\n    }\n  };\n\n  const clearBoard = () => {\n    updateField(Array(9).fill(null));\n    setCount(0);\n    setWinningCombination(null);\n  };\n\n  useEffect(() => {\n    isWinner();\n  }, [field]);\n\n  return (\n    <div className=\"tic-tac-toe\">\n      {field.map((cell, i) => {\n        return (\n          <button\n            type=\"button\"\n            name={i}\n            onClick={clickCell}\n            className=\"tic-tac-toe__cell\"\n            key={uuidv4()}\n          >\n            {field[i]}\n          </button>\n        );\n      })}\n      {\n        winningCombination\n        && (\n        <div className={\n          classNames(\n            'winning-line',\n            {\n              firstCombination: winningCombination === 1,\n              secondCombination: winningCombination === 2,\n              thirdCombination: winningCombination === 3,\n              fourthCombination: winningCombination === 4,\n              fifthCombination: winningCombination === 5,\n              sixthCombination: winningCombination === 6,\n              seventhCombination: winningCombination === 7,\n              eighthCombination: winningCombination === 8,\n            },\n          )\n        }\n        />\n        )\n      }\n    </div>\n  );\n};\n\nTicTacToe.propTypes = {\n  updateScore: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport { ModalWindow } from './components/ModalWindow';\nimport { ScoreBoard } from './components/ScoreBoard/ScoreBoard';\nimport { TicTacToe } from './components/TicTacToe';\n\nclass App extends React.PureComponent {\n  state = {\n    firstPlayerName: '',\n    secondPlayerName: '',\n    firstPlayerWins: 0,\n    secondPlayerWins: 0,\n  };\n\n  addNames = (firstPlayerName, secondPlayerName) => {\n    this.setState({\n      firstPlayerName,\n      secondPlayerName,\n    });\n  }\n\n  updateScore = (player) => {\n    const {\n      firstPlayerName,\n      secondPlayerName,\n    } = this.state;\n\n    const playerName = (player === 'X')\n      ? firstPlayerName\n      : secondPlayerName;\n\n    const playerCount = (player === 'X')\n      ? 'firstPlayerWins'\n      : 'secondPlayerWins';\n\n    alert(`${playerName} won!`);\n\n    this.setState(state => ({\n      [playerCount]: state[playerCount] + 1,\n    }));\n  }\n\n  render() {\n    const {\n      firstPlayerName,\n      secondPlayerName,\n      firstPlayerWins,\n      secondPlayerWins,\n    } = this.state;\n\n    return (\n      <div className=\"section\">\n        {\n          (!firstPlayerName || !secondPlayerName)\n          && <ModalWindow addNames={this.addNames} />\n        }\n\n        <TicTacToe\n          updateScore={this.updateScore}\n        />\n\n        <ScoreBoard\n          firstPlayerName={firstPlayerName}\n          secondPlayerName={secondPlayerName}\n          firstPlayerWins={firstPlayerWins}\n          secondPlayerWins={secondPlayerWins}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}