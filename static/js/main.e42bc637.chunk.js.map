{"version":3,"sources":["components/ModalWindow/ModalWindow.jsx","components/ScoreBoard/ScoreBoard.jsx","components/TicTacToe/TicTacToe.jsx","App.jsx","index.jsx"],"names":["ModalWindow","state","firstPlayerName","secondPlayerName","updateName","event","target","name","value","setState","addNames","this","props","className","onSubmit","preventDefault","type","placeholder","onChange","onClick","React","PureComponent","ScoreBoard","firstPlayerWins","secondPlayerWins","TicTacToe","field","Array","fill","count","winningCombination","clickCell","position","updatedField","isWinner","winningCombinations","player","i","line","setTimeout","updateScore","clearBoard","includes","alert","prevProps","prevState","map","cell","key","uuidv4","classNames","firstCombination","secondCombination","thirdCombination","fourthCombination","fifthCombination","sixthCombination","seventhCombination","eighthCombination","App","playerCount","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e42bc637.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ModalWindow.scss';\n\nexport class ModalWindow extends React.PureComponent {\n  state = {\n    firstPlayerName: '',\n    secondPlayerName: '',\n  };\n\n  updateName = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { addNames } = this.props;\n\n    const {\n      firstPlayerName,\n      secondPlayerName,\n    } = this.state;\n\n    return (\n      <div className=\"modalContainer\">\n        <div className=\"modalWindow window\">\n          <form\n            className=\"enter-nicknames-form\"\n            onSubmit={(event) => {\n              event.preventDefault();\n            }}\n          >\n            <div className=\"enter-nicknames-form__title\">\n              Please, enter nicknames\n            </div>\n            <input\n              type=\"text\"\n              name=\"firstPlayerName\"\n              className=\"enter-nicknames-form__first-player-name\"\n              placeholder=\"Enter first player name\"\n              value={firstPlayerName}\n              onChange={this.updateName}\n            />\n            <input\n              type=\"text\"\n              name=\"secondPlayerName\"\n              className=\"enter-nicknames-form__second-player-name\"\n              placeholder=\"Enter second player name\"\n              value={secondPlayerName}\n              onChange={this.updateName}\n            />\n            <button\n              type=\"submit\"\n              className=\"enter-nicknames-form__submit-button\"\n              onClick={() => addNames(firstPlayerName, secondPlayerName)}\n            >\n              Add names\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nModalWindow.propTypes = {\n  addNames: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './ScoreBoard.scss';\nimport PropTypes from 'prop-types';\n\nexport const ScoreBoard = ({\n  firstPlayerName,\n  secondPlayerName,\n  firstPlayerWins,\n  secondPlayerWins,\n}) => {\n  return (\n    <div className=\"score\">\n      <div className=\"score__title\">\n        Score:\n      </div>\n      <div className=\"score__first-player\">\n        {`${firstPlayerName}: ${firstPlayerWins}`}\n      </div>\n      <div className=\"score__second-player\">\n        {`${secondPlayerName}: ${secondPlayerWins}`}\n      </div>\n    </div>\n  );\n};\n\nScoreBoard.propTypes = {\n  firstPlayerName: PropTypes.string.isRequired,\n  firstPlayerWins: PropTypes.number.isRequired,\n  secondPlayerName: PropTypes.string.isRequired,\n  secondPlayerWins: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TicTacToe.scss';\nimport { v4 as uuidv4 } from 'uuid';\nimport classNames from 'classnames';\n\nexport class TicTacToe extends React.PureComponent {\n  state = {\n    field: Array(9).fill(null),\n    count: 0,\n    winningCombination: null,\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.field !== this.state.field) {\n      setTimeout(() => (this.isWinner()), 0);\n    }\n  }\n\n  clickCell = (event) => {\n    const { name: position } = event.target;\n    const { field, count } = this.state;\n\n    const updatedField = [...field];\n\n    if (updatedField[position] === null) {\n      updatedField[position] = (count % 2 === 0 ? 'X' : 'O');\n\n      this.setState((state) => {\n        return {\n          count: state.count + 1,\n          field: updatedField,\n        };\n      });\n    }\n  }\n\n  isWinner = () => {\n    const { field, count } = this.state;\n\n    const winningCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    const player = (count % 2 === 0 ? 'O' : 'X');\n\n    for (let i = 0; i < 8; i += 1) {\n      const line = winningCombinations[i];\n\n      if (field[line[0]] === player\n        && field[line[1]] === player\n        && field[line[2]] === player) {\n        this.setState({ winningCombination: i + 1 });\n\n        setTimeout(() => {\n          this.props.updateScore(player);\n          this.clearBoard();\n        }, 200);\n\n        return;\n      }\n    }\n\n    if (!field.includes(null)) {\n      alert('Draw');\n      this.clearBoard();\n    }\n  }\n\n  clearBoard = () => {\n    this.setState({\n      field: Array(9).fill(null),\n      count: 0,\n      winningCombination: null,\n    });\n  }\n\n  render() {\n    const {\n      field,\n      winningCombination,\n    } = this.state;\n\n    return (\n      <div className=\"tic-tac-toe\">\n        {field.map((cell, i) => {\n          return (\n            <button\n              type=\"button\"\n              name={i}\n              onClick={this.clickCell}\n              className=\"tic-tac-toe__cell\"\n              key={uuidv4()}\n            >\n              {field[i]}\n            </button>\n          );\n        })}\n        {\n          winningCombination\n          && (\n          <div className={\n            classNames(\n              'winning-line',\n              {\n                firstCombination: winningCombination === 1,\n                secondCombination: winningCombination === 2,\n                thirdCombination: winningCombination === 3,\n                fourthCombination: winningCombination === 4,\n                fifthCombination: winningCombination === 5,\n                sixthCombination: winningCombination === 6,\n                seventhCombination: winningCombination === 7,\n                eighthCombination: winningCombination === 8,\n              },\n            )\n          }\n          />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nTicTacToe.propTypes = {\n  updateScore: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport { ModalWindow } from './components/ModalWindow';\nimport { ScoreBoard } from './components/ScoreBoard/ScoreBoard';\nimport { TicTacToe } from './components/TicTacToe';\n\nclass App extends React.PureComponent {\n  state = {\n    firstPlayerName: '',\n    secondPlayerName: '',\n    firstPlayerWins: 0,\n    secondPlayerWins: 0,\n  };\n\n  addNames = (firstPlayerName, secondPlayerName) => {\n    this.setState({\n      firstPlayerName,\n      secondPlayerName,\n    });\n  }\n\n  updateScore = (player) => {\n    const {\n      firstPlayerName,\n      secondPlayerName,\n    } = this.state;\n\n    const playerName = (player === 'X')\n      ? firstPlayerName\n      : secondPlayerName;\n\n    const playerCount = (player === 'X')\n      ? 'firstPlayerWins'\n      : 'secondPlayerWins';\n\n    alert(`${playerName} won!`);\n\n    this.setState(state => ({\n      [playerCount]: state[playerCount] + 1,\n    }));\n  }\n\n  render() {\n    const {\n      firstPlayerName,\n      secondPlayerName,\n      firstPlayerWins,\n      secondPlayerWins,\n    } = this.state;\n\n    return (\n      <div className=\"section\">\n        {\n          (!firstPlayerName || !secondPlayerName)\n          && <ModalWindow addNames={this.addNames} />\n        }\n\n        <TicTacToe\n          updateScore={this.updateScore}\n        />\n\n        <ScoreBoard\n          firstPlayerName={firstPlayerName}\n          secondPlayerName={secondPlayerName}\n          firstPlayerWins={firstPlayerWins}\n          secondPlayerWins={secondPlayerWins}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}